var ngSliderComponents;
!function (t) {
    var e = function () {
        function t() {
        }

        return t
    }(), n = [function () {
        return {restrict: "AE", replace: !0, scope: {}, link: e, template: "<h1>It works!</h1>"}
    }];
    angular.module("ngSlider").directive("ngRanger", n)
}(ngSliderComponents || (ngSliderComponents = {}));
var ngSliderComponents;
!function (t) {
    var e = function () {
        function t(t, e) {
            return this.element = t, this.sLeft = 0, this.sWidth = this.width(), this
        }

        return t.prototype.width = function () {
            return this.element[0].getBoundingClientRect().width
        }, t
    }(), n = function () {
        function t(t, e, n) {
            var i = this;
            this.$document = t, this.$timeout = e, this.$window = n, this.restrict = "E", this.replace = !0, this.scope = {
                model: "=",
                min: "=",
                max: "=",
                translateFn: "&"
            }, this.template = '<div class="ng-slider"><span class="ng-slider-min-label"></span><span class="ng-slider-max-label"></span><span class="ng-slider-handle"></span><span class="ng-slider-fullbar"></span><span class="ng-slider-selection"></span></div>', this.precision = 0, this.step = 1, this.handles = [], this.width = 0, this.fullBarWidth = 0, this.minVal = 0, this.maxVal = 0, this.valueRange = 0, this.left = 0, this.maxLeft = 0, this.handleWidth = 0, this.link = function (t, e, n) {
                i.$$scope = t, i.$$element = e, i.$$attrs = n, i.translateFn = angular.isFunction(t.translateFn) ? t.translateFn() : i.translateFn, i.init(), i.initElements(), i.calcViewDimensions(), i.bindEventsToElements(), angular.element(i.$window).bind("resize", function () {
                    i.$timeout(function () {
                        i.initElements(), i.calcViewDimensions()
                    })
                })
            }
        }

        return t.prototype.translateFn = function (t) {
            return "" + t
        }, t.factory = function () {
            var e = function (e, n, i) {
                return new t(e, n, i)
            };
            return e
        }, t.prototype.init = function () {
            this.minVal = this.$$scope.min, this.maxVal = this.$$scope.max, this.valueRange = this.maxVal - this.minVal
        }, t.prototype.calcViewDimensions = function () {
            this.width = this.$$element[0].getBoundingClientRect().width, this.left = this.$$element[0].getBoundingClientRect().left, this.maxLeft = this.width - this.handleWidth
        }, t.prototype.initElements = function () {
            var t = this;
            this.handles.length && (this.handles = []), angular.forEach(this.$$element.find("span"), function (n, i) {
                switch (n = angular.element(n), i) {
                    case 0:
                        var s = new e(n, t.minVal);
                        t.handles.push(s), t.$timeout(function () {
                            t.setLeft(s, 0), s.element.text(t.translateFn(t.minVal))
                        });
                        break;
                    case 1:
                        var a = new e(n, t.maxVal);
                        t.handles.push(a), t.$timeout(function () {
                            a.element.text(t.translateFn(t.maxVal)), t.setLeft(a, t.fullBarWidth - a.width())
                        });
                        break;
                    case 2:
                        var l = new e(n, t.minVal);
                        t.handleWidth = l.width(), t.handles.push(l), t.$timeout(function () {
                            t.setLeft(l, t.valueToOffset(t.$$scope.model))
                        });
                        break;
                    case 3:
                        var o = new e(n, t.minVal);
                        t.handles.push(o), t.fullBarWidth = o.width();
                        break;
                    case 4:
                        var r = new e(n, t.minVal);
                        t.$timeout(function () {
                            r.element.css({width: t.valueToOffset(t.$$scope.model) + "px"})
                        }), t.handles.push(r)
                }
            }, this)
        }, t.prototype.bindEventsToElements = function () {
            var t = this, e = this.handles.filter(function (t) {
                return t.element.hasClass("ng-slider-handle") ? t : void 0
            });
            angular.forEach(e, function (e) {
                e.element.bind("mousedown", angular.bind(t, t.onStart, e))
            })
        }, t.prototype.onStart = function (t, e) {
            e.stopPropagation(), e.preventDefault(), t.element.addClass("active"), this.$document.on("mousemove", angular.bind(this, this.onMove, t)), this.$document.on("mouseup", angular.bind(this, this.onStop, t))
        }, t.prototype.onMove = function (t, e) {
            var n, i = e.clientX || ("undefined" != typeof e.originalEvent ? e.originalEvent.touches[0].clientX : e.touches[0].clientX), s = this.left, a = i - s - this.handleWidth / 2;
            if (n = this.roundValue(this.offsetToValue(a)), 0 >= a || 0 >= n) {
                if (0 !== t.sLeft) {
                    this.setLeft(t, 0), t.sVal = 0, this.$$scope.model = 0, this.$$scope.$apply();
                    var l = this.getHandler("SELECTION");
                    l.element.css({width: "0px"})
                }
            } else {
                if (a > this.maxLeft || n > this.maxVal) {
                    this.setLeft(t, this.maxLeft), t.sVal = this.maxVal, this.$$scope.model = this.maxVal, this.$$scope.$apply();
                    var l = this.getHandler("SELECTION");
                    return void l.element.css({width: this.fullBarWidth + "px"})
                }
                this.setLeft(t, a), t.sVal = n, this.$$scope.model = n, this.$$scope.$apply();
                var l = this.getHandler("SELECTION");
                l.element.css({width: a + "px"})
            }
        }, t.prototype.onStop = function (t) {
            t.element.removeClass("active"), this.$document.unbind("mousemove"), this.$document.unbind("mouseup"), this.$$scope.$emit("ngSlider:stop", this.$$scope.model)
        }, t.prototype.setLeft = function (t, e) {
            t.sLeft = e, t.element.css({left: e + "px"})
        }, t.prototype.valueToOffset = function (t) {
            return (t - this.minVal) * this.maxLeft / this.valueRange
        }, t.prototype.offsetToValue = function (t) {
            return t / this.maxLeft * this.valueRange + this.minVal
        }, t.prototype.roundValue = function (t) {
            return parseInt(t.toFixed(this.precision))
        }, t.prototype.getHandler = function (t) {
            var e, n;
            switch (t.toUpperCase()) {
                case"FULLBAR":
                    e = "ng-slider-fullbar";
                    break;
                case"SELECTION":
                    e = "ng-slider-selection";
                    break;
                case"HANDLE":
                    e = "ng-slider-handle";
                    break;
                case"MINLABEL":
                    e = "ng-slider-min-label";
                    break;
                case"MAXLABEL":
                    e = "ng-slider-max-label"
            }
            return this.handles.forEach(function (t) {
                t.element.hasClass(e) && (n = t)
            }), n
        }, t.$inject = ["$document", "$timeout"], t
    }();
    angular.module("ngSlider").directive("ngSlider", n.factory())
}(ngSliderComponents || (ngSliderComponents = {}));
var ngSliderComponents;
!function (t) {
    angular.module("ngSlider", [])
}(ngSliderComponents || (ngSliderComponents = {}));